# -*- coding: utf-8 -*-
"""AbhiANNmodel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Bu0Iaq-wqR_DDavvcBcnv1jYKwUwVzE
"""

import numpy as np
from random import randint
from sklearn.utils import shuffle
from sklearn.preprocessing import MinMaxScaler

train_samples = []
train_labels = []

for i in range(50):
  random_younger = randint(13,60)
  train_samples.append(random_younger)
  train_labels.append(1)

  random_older = randint(61,100)
  train_samples.append(random_older)
  train_labels.append(0)

for i in range(1000):
   random_younger = randint(13,60)
   train_samples.append(random_younger)
   train_labels.append(0)

   random_younger = randint(61,100)
   train_samples.append(random_older)
   train_labels.append(1)

for i in train_samples:
  print(i)

for i in train_labels:
  print(i)

train_labels = np.array(train_labels)
train_samples = np.array(train_samples)
train_labels, train_samples = shuffle(train_labels, train_samples)

scaler = MinMaxScaler(feature_range=(0,1))
scaled_train_samples = scaler.fit_transform(train_samples.reshape(-1,1))

for i in scaled_train_samples:
  print(i)

"""**SEQUENTIAL MODEL CREATION**"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_crossentropy

physical_devices = tf.config.experimental.list_physical_devices('GPU')
print("Num GPUs Available", len(physical_devices))
tf.config.experimental.set_memory_growth(physical_devices[0], True)

model = Sequential([
     Dense(units=16,input_shape=(1,), activation='relu'),
     Dense(units=32, activation='relu'),
     Dense(units=2, activation='softmax')
    ])

model.summary()

"""**TRAINING OF MODEL**"""

model.compile(optimizer=Adam(learning_rate=0.0001), loss='sparse_categorical_crossentropy', metrics =['accuracy'])

model.fit(x=scaled_train_samples, y=train_labels, batch_size=10, epochs=30, shuffle=True, verbose=2)

"""**CREATION OF VALIDATION SET**"""

model.fit(x=scaled_train_samples, y=train_labels, validation_split=0.1 , batch_size=10, epochs=40, shuffle=True, verbose=2)

"""**Prediction Using Test-Set**"""

test_labels = []
test_samples = []

for i in range(50):
  random_younger = randint(13,60)
  test_samples.append(random_younger)
  test_labels.append(1)

  random_older = randint(61,100)
  test_samples.append(random_older)
  test_labels.append(0)

for i in range(1000):
   random_younger = randint(13,60)
   test_samples.append(random_younger)
   test_labels.append(0)

   random_younger = randint(61,100)
   test_samples.append(random_older)
   test_labels.append(1)

test_labels = np.array(test_labels)
test_samples = np.array(test_samples)
test_labels, test_samples = shuffle(test_labels, test_samples)

scaled_test_samples = scaler.fit_transform(test_samples.reshape(-1,1))

"""**NOW** **WE**'**ll** **PREDICT**"""

predictions = model.predict(x=scaled_test_samples, batch_size=10, verbose=0)

for i in predictions:
  print (i)

rounded_predictions = np.argmax(predictions, axis=-1)

for i in rounded_predictions:
  print(i)

"""**CREATING** **A** **CONFUSION** **MATRIX**  (to visualise prediction results)"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from sklearn.metrics import confusion_matrix
import itertools
import matplotlib.pyplot as plt

cm = confusion_matrix(y_true=test_labels, y_pred=rounded_predictions)

def plot_confusion_matrix(cm, classes,
                        normalize=False,
                        title='Confusion matrix',
                        cmap=plt.cm.Blues):

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    print(cm)
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
            horizontalalignment="center",
            color="white" if cm[i, j] > thresh else "black")

cm_plot_labels = ['take_lower_berth','take_upper_berth']
plot_confusion_matrix(cm=cm, classes=cm_plot_labels, title='Confusion Matrix')